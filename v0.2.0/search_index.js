var documenterSearchIndex = {"docs":
[{"location":"sudoku/#Sudoku","page":"Sudoku","title":"Sudoku","text":"","category":"section"},{"location":"sudoku/","page":"Sudoku","title":"Sudoku","text":"Doc is still in construction. Please check models/sudoku.jl for details on the implementation.","category":"page"},{"location":"sudoku/#Constructing-a-sudoku-model","page":"Sudoku","title":"Constructing a sudoku model","text":"","category":"section"},{"location":"sudoku/","page":"Sudoku","title":"Sudoku","text":"LocalSearchSolvers.sudoku","category":"page"},{"location":"sudoku/#LocalSearchSolvers.sudoku","page":"Sudoku","title":"LocalSearchSolvers.sudoku","text":"sudoku(n; start= Dictionary{Int, Int}(), modeler = :JuMP)\n\nCreate a model for the sudoku problem of domain 1:n² with optional starting values. The modeler argument accepts :raw, :MOI, and :JuMP (default), which refer respectively to the solver internal model, the MathOptInterface model, and the JuMP model.\n\n\n\n\n\n","category":"function"},{"location":"d_constraint/#Constraints.jl","page":"Constraints.jl","title":"Constraints.jl","text":"","category":"section"},{"location":"d_constraint/","page":"Constraints.jl","title":"Constraints.jl","text":"A  back-end pacage for JuliaConstraints front packages, such as LocalSearchSolvers.jl.","category":"page"},{"location":"d_constraint/","page":"Constraints.jl","title":"Constraints.jl","text":"It provides the following features:","category":"page"},{"location":"d_constraint/","page":"Constraints.jl","title":"Constraints.jl","text":"A dictionary to store usual constraint: usual_contraint, which contains the following entries\n:all_different\n:dist_different\n:eq, :all_equal, :all_equal_param\n:ordered\n:always_true (mainly for testing default Constraint() constructor)\nFor each constraint c, the following properties\narguments length\nconcept (predicate the variables compliance with c)\nerror (a function that evaluate how much c is violated)\nparameters length\nknown symmetries of c\nA learning function using CompositionalNetworks.jl. If no error function is given when instanciating c, it will check the existence of a composition related to c and set the error to it.","category":"page"},{"location":"d_constraint/","page":"Constraints.jl","title":"Constraints.jl","text":"Follow the list of the constraints currently stored in usual_constraint. Note that if the constraint is named _my_constraint, it can be accessed as usual_contraint[:my_constraint].","category":"page"},{"location":"d_constraint/","page":"Constraints.jl","title":"Constraints.jl","text":"Constraints._all_different\nConstraints._all_equal\nConstraints._all_equal_param\nConstraints._dist_different\nConstraints._eq\nConstraints._ordered","category":"page"},{"location":"d_constraint/#Constraints._all_different","page":"Constraints.jl","title":"Constraints._all_different","text":"_all_different\n\nGlobal constraint ensuring that all the values of a given configuration are unique.\n\n\n\n\n\n","category":"constant"},{"location":"d_constraint/#Constraints._all_equal","page":"Constraints.jl","title":"Constraints._all_equal","text":"all_equal\n\nGlobal constraint ensuring that all the values of x are all equal.\n\n\n\n\n\n","category":"constant"},{"location":"d_constraint/#Constraints._all_equal_param","page":"Constraints.jl","title":"Constraints._all_equal_param","text":"all_equal_param\n\nGlobal constraint ensuring that all the values of x are all equal to a given parameter param.\n\n\n\n\n\n","category":"constant"},{"location":"d_constraint/#Constraints._dist_different","page":"Constraints.jl","title":"Constraints._dist_different","text":"dist_different\n\nLocal constraint ensuring that concept(dist_different, x) = |x[1] - x[2]| ≠ |x[3] - x[4]|).\n\n\n\n\n\n","category":"constant"},{"location":"d_constraint/#Constraints._eq","page":"Constraints.jl","title":"Constraints._eq","text":"_eq\n\nEquality between two variables.\n\n\n\n\n\n","category":"constant"},{"location":"d_constraint/#Constraints._ordered","page":"Constraints.jl","title":"Constraints._ordered","text":"ordered(x)\n\nGlobal constraint ensuring that all the values of x are ordered.\n\n\n\n\n\n","category":"constant"},{"location":"d_constraint/","page":"Constraints.jl","title":"Constraints.jl","text":"Modules = [Constraints]\nPrivate = false","category":"page"},{"location":"d_constraint/#Constraints.usual_constraints","page":"Constraints.jl","title":"Constraints.usual_constraints","text":"usual_constraints::Dict\n\nDictionary that contains all the usual constraints defined in Constraint.jl. \n\n\n\n\n\n","category":"constant"},{"location":"d_constraint/#Constraints.usual_symmetries","page":"Constraints.jl","title":"Constraints.usual_symmetries","text":"symmetries\n\nA Dictionary that contains the function to apply for each symmetry to avoid searching a whole space.\n\n\n\n\n\n","category":"constant"},{"location":"d_constraint/#Constraints.Constraint","page":"Constraints.jl","title":"Constraints.Constraint","text":"Constraint\n\nParametric stucture with the following fields.\n\nconcept: a Boolean function that, given an assignment x, outputs true if x satisfies the constraint, and false otherwise.\nerror: a positive function that works as preferences over invalid assignements. Return 0.0 if the constraint is satisfied, and a strictly positive real otherwise.\n\n\n\n\n\n","category":"type"},{"location":"d_constraint/#Constraints.args_length-Tuple{Constraint}","page":"Constraints.jl","title":"Constraints.args_length","text":"args_length(c::Constraint)\n\nReturn the expected length restriction of the arguments in a constraint c. The value nothing indicates that any strictly positive number of value is accepted.\n\n\n\n\n\n","category":"method"},{"location":"d_constraint/#Constraints.concept-Tuple{Constraint}","page":"Constraints.jl","title":"Constraints.concept","text":"concept(c::Constraint)\n\nReturn the concept (function) of constraint c.     concept(c::Constraint, x...; param = nothing) Apply the concept of c to values x and optionally param.\n\n\n\n\n\n","category":"method"},{"location":"d_constraint/#Constraints.error_f-Tuple{Constraint}","page":"Constraints.jl","title":"Constraints.error_f","text":"error_f(c::Constraint)\n\nReturn the error function of constraint c.     error_f(c::Constraint, x; param = nothing) Apply the error function of c to values x and optionally param.\n\n\n\n\n\n","category":"method"},{"location":"d_constraint/#Constraints.params_length-Tuple{Constraint}","page":"Constraints.jl","title":"Constraints.params_length","text":"params_length(c::Constraint)\n\nReturn the expected length restriction of the arguments in a constraint c. The value nothing indicates that any strictly positive number of parameters is accepted.\n\n\n\n\n\n","category":"method"},{"location":"d_constraint/#Constraints.symmetries-Tuple{Constraint}","page":"Constraints.jl","title":"Constraints.symmetries","text":"symmetries(c::Constraint)\n\nReturn the list of symmetries of c.\n\n\n\n\n\n","category":"method"},{"location":"domain/#ConstraintDomains.jl","page":"ConstraintDomains.jl","title":"ConstraintDomains.jl","text":"","category":"section"},{"location":"domain/","page":"ConstraintDomains.jl","title":"ConstraintDomains.jl","text":"Currently only discrete domains are supported using the following function. ","category":"page"},{"location":"domain/","page":"ConstraintDomains.jl","title":"ConstraintDomains.jl","text":"ConstraintDomains.domain","category":"page"},{"location":"domain/#ConstraintDomains.domain","page":"ConstraintDomains.jl","title":"ConstraintDomains.domain","text":"domain(values::AbstractVector; type = :set)\n\nDiscrete domain constructor. The type keyword can be set to :set (default) or :indices.\n\nd1 = domain([1,2,3,4], type = :indices)\nd2 = domain([53.69, 89.2, 0.12])\nd3 = domain([2//3, 89//123])\nd4 = domain(4.3)\n\n\n\n\n\n","category":"function"},{"location":"golomb/#Golomb-ruler","page":"Golomb ruler","title":"Golomb ruler","text":"","category":"section"},{"location":"golomb/","page":"Golomb ruler","title":"Golomb ruler","text":"Doc is still in construction. Please check models/golomb.jl for details on the implementation.","category":"page"},{"location":"golomb/#Constructing-a-Golomb-ruler-model","page":"Golomb ruler","title":"Constructing a Golomb ruler model","text":"","category":"section"},{"location":"golomb/","page":"Golomb ruler","title":"Golomb ruler","text":"LocalSearchSolvers.golomb","category":"page"},{"location":"golomb/#LocalSearchSolvers.golomb","page":"Golomb ruler","title":"LocalSearchSolvers.golomb","text":"golomb(n, L=n²)\n\nModel the Golomb problem of n marks on the ruler 0:L. The modeler argument accepts :raw, and :JuMP (default), which refer respectively to the solver internal model, the MathOptInterface model, and the JuMP model.\n\n\n\n\n\n","category":"function"},{"location":"icn/#CompositionalNetworks.jl","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.jl","text":"","category":"section"},{"location":"icn/","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.jl","text":"Pages = [\"public.md\"]\nDepth = 5","category":"page"},{"location":"icn/","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.jl","text":"CompositionalNetworks.jl, a Julia package for Interpretable Compositional Networks (ICN), a variant of neural networks, allowing the user to get interpretable results, unlike regular artificial neural networks.","category":"page"},{"location":"icn/","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.jl","text":"The current state of our ICN focuses on the composition of error functions for LocalSearchSolvers.jl, but produces results independently of it and export it to either/both Julia functions or/and human readable output.","category":"page"},{"location":"icn/#How-does-it-work?","page":"CompositionalNetworks.jl","title":"How does it work?","text":"","category":"section"},{"location":"icn/","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.jl","text":"The package comes with a basic ICN for learning global constraints. The ICN is composed of 4 layers: transformation, arithmetic, aggregation, and comparison. Each contains several operations that can be composed in various ways. Given a concept (a predicate over the variables' domains), a metric (hamming by default), and the variables' domains, we learn the binary weights of the ICN. ","category":"page"},{"location":"icn/#Installation","page":"CompositionalNetworks.jl","title":"Installation","text":"","category":"section"},{"location":"icn/","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.jl","text":"] add CompositionalNetworks","category":"page"},{"location":"icn/","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.jl","text":"As the package is in a beta version, some changes in the syntax and features are likely to occur. However, those changes should be minimal between minor versions. Please update with caution.","category":"page"},{"location":"icn/#Quickstart","page":"CompositionalNetworks.jl","title":"Quickstart","text":"","category":"section"},{"location":"icn/","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.jl","text":"# 4 variables in 1:4\ndoms = [domain([1,2,3,4]) for i in 1:4]\n\n# allunique concept (that is used to define the :all_different constraint)\nerr = explore_learn_compose(allunique, domains=doms)\n# > interpretation: identity ∘ count_positive ∘ sum ∘ count_eq_left\n\n# test our new error function\n@assert err([1,2,3,3], dom_size = 4) > 0.0\n\n# export an all_different function to file \"current/path/test_dummy.jl\" \ncompose_to_file!(icn, \"all_different\", \"test_dummy.jl\")","category":"page"},{"location":"icn/","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.jl","text":"The output file should produces a function that can be used as follows (assuming the maximum domain size is 7)","category":"page"},{"location":"icn/","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.jl","text":"import CompositionalNetworks\n\nall_different([1,2,3,4,5,6,7]; dom_size = 7)\n# > 0.0 (which means true, no errors)","category":"page"},{"location":"icn/","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.jl","text":"Please see JuliaConstraints/Constraints.jl/learn.jl for an extensive example of ICN learning and compositions.","category":"page"},{"location":"icn/#Public-interface","page":"CompositionalNetworks.jl","title":"Public interface","text":"","category":"section"},{"location":"icn/","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.jl","text":"Modules = [CompositionalNetworks]\nPrivate = false","category":"page"},{"location":"icn/#CompositionalNetworks.ICN","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.ICN","text":"ICN(; nvars, dom_size, param, transformation, arithmetic, aggregation, comparison)\n\nConstruct an Interpretable Compositional Network, with the following arguments:\n\nnvars: number of variable in the constraint\ndom_size: maximum domain size of any variable in the constraint\nparam: optional parameter (default to nothing)\ntransformation: a transformation layer (optional)\narithmetic: a arithmetic layer (optional)\naggregation: a aggregation layer (optional)\ncomparison: a comparison layer (optional)\n\n\n\n\n\n","category":"type"},{"location":"icn/#CompositionalNetworks.aggregation_layer-Tuple{}","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.aggregation_layer","text":"aggregation_layer()\n\nGenerate the layer of aggregations of the ICN. The operations are mutually exclusive, that is only one will be selected.\n\n\n\n\n\n","category":"method"},{"location":"icn/#CompositionalNetworks.arithmetic_layer-Tuple{}","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.arithmetic_layer","text":"arithmetic_layer()\n\nGenerate the layer of arithmetic operations of the ICN. The operations are mutually exclusive, that is only one will be selected.\n\n\n\n\n\n","category":"method"},{"location":"icn/#CompositionalNetworks.comparison_layer","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.comparison_layer","text":"comparison_layer(param = false)\n\nGenerate the layer of transformations functions of the ICN. Iff param value is set, also includes all the parametric comparison with that value. The operations are mutually exclusive, that is only one will be selected.\n\n\n\n\n\n","category":"function"},{"location":"icn/#CompositionalNetworks.compose-Tuple{ICN}","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.compose","text":"compose(icn)\ncompose(icn, weights)\n\nReturn a function composed by some of the operations of a given ICN. Can be applied to any vector of variables. If weights are given, will assign to icn.\n\n\n\n\n\n","category":"method"},{"location":"icn/#CompositionalNetworks.csv2space-Tuple{Any}","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.csv2space","text":"csv2space(file; filter=:none)\n\nConvert a csv file into a collection of configurations. If the filter is set to :concept, only solutions will be extracted.\n\n\n\n\n\n","category":"method"},{"location":"icn/#CompositionalNetworks.hamming-Tuple{Any,Any}","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.hamming","text":"hamming(x, X)\n\nCompute the hamming distance of x over a collection of solutions X, i.e. the minimal number of variables to switch in xto reach a solution.\n\n\n\n\n\n","category":"method"},{"location":"icn/#CompositionalNetworks.lazy-Tuple{Vararg{Function,N} where N}","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.lazy","text":"lazy(funcs::Function...)\n\nGenerate methods extended to a vector instead of one of its components. A function f should have the following signature: f(i::Int, x::V; param = nothing).\n\n\n\n\n\n","category":"method"},{"location":"icn/#CompositionalNetworks.lazy_param-Tuple{Vararg{Function,N} where N}","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.lazy_param","text":"lazy_param(funcs::Function...)\n\nGenerate methods extended to a vector instead of one of its components. A function f should have the following signature: f(i::Int, x::V; param).\n\n\n\n\n\n","category":"method"},{"location":"icn/#CompositionalNetworks.learn_compose","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.learn_compose","text":"learn_compose(;\n    nvars, dom_size, param=nothing, icn=ICN(nvars, dom_size, param),\n    X, X_sols, global_iter=100, local_iter=100, metric=hamming, popSize=200\n)\n\nCreate an ICN, optimize it, and return its composition.\n\n\n\n\n\n","category":"function"},{"location":"icn/#CompositionalNetworks.regularization-Tuple{Any}","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.regularization","text":"regularization(icn)\n\nReturn the regularization value of an ICN weights, which is proportional to the normalized number of operations selected in the icn layers.\n\n\n\n\n\n","category":"method"},{"location":"icn/#CompositionalNetworks.show_composition-Tuple{Any}","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.show_composition","text":"show_composition(icn)\n\nReturn the composition (weights) of an ICN.\n\n\n\n\n\n","category":"method"},{"location":"icn/#CompositionalNetworks.show_layers-Tuple{Any}","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.show_layers","text":"show_layers(icn)\n\nReturn a formated string with each layers in the icn.\n\n\n\n\n\n","category":"method"},{"location":"icn/#CompositionalNetworks.transformation_layer","page":"CompositionalNetworks.jl","title":"CompositionalNetworks.transformation_layer","text":"transformation_layer(param = false)\n\nGenerate the layer of transformations functions of the ICN. Iff param value is true, also includes all the parametric transformations.\n\n\n\n\n\n","category":"function"},{"location":"internals/#Internal","page":"Internals","title":"Internal","text":"","category":"section"},{"location":"internals/","page":"Internals","title":"Internals","text":"Pages = [\"internal.md\"]\nDepth = 5","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [LocalSearchSolvers]\nPublic = false","category":"page"},{"location":"internals/#LocalSearchSolvers.AbstractSolver","page":"Internals","title":"LocalSearchSolvers.AbstractSolver","text":"AbstractSolver\n\nAbstract type to encapsulate the different solver types such as Solver or _SubSolver.\n\n\n\n\n\n","category":"type"},{"location":"internals/#LocalSearchSolvers.Constraint","page":"Internals","title":"LocalSearchSolvers.Constraint","text":"Constraint{F <: Function}\n\nStructure to store an error function and the variables it constrains.\n\n\n\n\n\n","category":"type"},{"location":"internals/#LocalSearchSolvers.MOIAllDifferent","page":"Internals","title":"LocalSearchSolvers.MOIAllDifferent","text":"MOIAllDifferent <: MOI.AbstractVectorSet\n\nDOCSTRING\n\n\n\n\n\n","category":"type"},{"location":"internals/#LocalSearchSolvers.MOIAllEqual","page":"Internals","title":"LocalSearchSolvers.MOIAllEqual","text":"MOIAllEqual <: MOI.AbstractVectorSet\n\nDOCSTRING\n\n\n\n\n\n","category":"type"},{"location":"internals/#LocalSearchSolvers.MOIAllEqualParam","page":"Internals","title":"LocalSearchSolvers.MOIAllEqualParam","text":"MOIAllEqualParam{T <: Number} <: MOI.AbstractVectorSet\n\nDOCSTRING\n\nArguments:\n\nparam::T: DESCRIPTION\ndimension::Int: DESCRIPTION\nMOIAllEqualParam(param, dim = 0) = begin       #= none:5 =#       new{typeof(param)}(param, dim)   end: DESCRIPTION\n\n\n\n\n\n","category":"type"},{"location":"internals/#LocalSearchSolvers.MOIAlwaysTrue","page":"Internals","title":"LocalSearchSolvers.MOIAlwaysTrue","text":"MOIAlwaysTrue <: MOI.AbstractVectorSet\n\nDOCSTRING\n\n\n\n\n\n","category":"type"},{"location":"internals/#LocalSearchSolvers.MOIDistDifferent","page":"Internals","title":"LocalSearchSolvers.MOIDistDifferent","text":"MOIDistDifferent <: MOI.AbstractVectorSet\n\nDOCSTRING\n\n\n\n\n\n","category":"type"},{"location":"internals/#LocalSearchSolvers.MOIEq","page":"Internals","title":"LocalSearchSolvers.MOIEq","text":"MOIEq <: MOI.AbstractVectorSet\n\nDOCSTRING\n\n\n\n\n\n","category":"type"},{"location":"internals/#LocalSearchSolvers.MOIError","page":"Internals","title":"LocalSearchSolvers.MOIError","text":"MOIError{F <: Function} <: MOI.AbstractVectorSet\n\nDOCSTRING\n\nArguments:\n\nf::F: DESCRIPTION\ndimension::Int: DESCRIPTION\nMOIError(f, dim = 0) = begin       #= none:5 =#       new{typeof(f)}(f, dim)   end: DESCRIPTION\n\n\n\n\n\n","category":"type"},{"location":"internals/#LocalSearchSolvers.MOIOrdered","page":"Internals","title":"LocalSearchSolvers.MOIOrdered","text":"MOIOrdered <: MOI.AbstractVectorSet\n\nDOCSTRING\n\n\n\n\n\n","category":"type"},{"location":"internals/#LocalSearchSolvers.MOIPredicate","page":"Internals","title":"LocalSearchSolvers.MOIPredicate","text":"MOIPredicate{F <: Function} <: MOI.AbstractVectorSet\n\nDOCSTRING\n\nArguments:\n\nf::F: DESCRIPTION\ndimension::Int: DESCRIPTION\nMOIPredicate(f, dim = 0) = begin       #= none:5 =#       new{typeof(f)}(f, dim)   end: DESCRIPTION\n\n\n\n\n\n","category":"type"},{"location":"internals/#LocalSearchSolvers.Objective","page":"Internals","title":"LocalSearchSolvers.Objective","text":"Objective{F <: Function}\n\nA structure to handle objectives in a solver. struct Objective{F <: Function}     name::String     f::F end`\n\n\n\n\n\n","category":"type"},{"location":"internals/#LocalSearchSolvers.Objective-Union{Tuple{F2}, Tuple{Any,LocalSearchSolvers.Objective{F2}}} where F2<:Function","page":"Internals","title":"LocalSearchSolvers.Objective","text":"Objective(F, o::Objective{F2}) where {F2 <: Function}\n\nConstructor used in specializing a solver. Should never be called externally.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers.Optimizer","page":"Internals","title":"LocalSearchSolvers.Optimizer","text":"Optimizer <: MOI.AbstractOptimizer\n\nDOCSTRING\n\nArguments:\n\nsolver::Solver: DESCRIPTION\nstatus::MOI.TerminationStatusCode: DESCRIPTION\noptions::Options: DESCRIPTION\n\n\n\n\n\n","category":"type"},{"location":"internals/#LocalSearchSolvers.Optimizer-2","page":"Internals","title":"LocalSearchSolvers.Optimizer","text":"Optimizer(model = Model(); options = Options())\n\nDOCSTRING\n\n\n\n\n\n","category":"type"},{"location":"internals/#LocalSearchSolvers.SudokuInstance","page":"Internals","title":"LocalSearchSolvers.SudokuInstance","text":"mutable struct SudokuInstance{T <: Integer} <: AbstractMatrix{T}\n\nA struct for SudokuInstances, which is a subtype of AbstractMatrix.\n\nSudokuInstance(A::AbstractMatrix{T})\nSudokuInstance(::Type{T}, n::Int) # fill in blank sudoku of type T\nSudokuInstance(n::Int) # fill in blank sudoku of type Int\nSudokuInstance(::Type{T}) # fill in \"standard\" 9×9 sudoku of type T\nSudokuInstance() # fill in \"standard\" 9×9 sudoku of type Int\nSudokuInstance(n::Int, P::Pair{Tuple{Int, Int}, T}...) where {T <: Integer} # construct a sudoku given pairs of coordinates and values\nSudokuInstance(P::Pair{Tuple{Int, Int}, T}...) # again, default to 9×9 sudoku, constructing given pairs\n\nConstructor functions for the SudokuInstance struct.\n\n\n\n\n\n","category":"type"},{"location":"internals/#LocalSearchSolvers.SudokuInstance-Tuple{Dictionaries.Dictionary}","page":"Internals","title":"LocalSearchSolvers.SudokuInstance","text":"SudokuInstance(X::Dictionary)\n\nConstruct a SudokuInstance with the values X of a solver as input.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers.Variable","page":"Internals","title":"LocalSearchSolvers.Variable","text":"Variable{D <: AbstractDomain}\n\nA structure containing the necessary information for a solver's variables: name, domain, and constraints it belongs.\n\nstruct Variable{D <: AbstractDomain}\n    domain::D\n    constraints::Indices{Int}\nend\n\n\n\n\n\n","category":"type"},{"location":"internals/#LocalSearchSolvers._Model","page":"Internals","title":"LocalSearchSolvers._Model","text":"_Model{V <: Variable{<:AbstractDomain},C <: Constraint{<:Function},O <: Objective{<:Function}}\n\nA struct to model a problem as a set of variables, domains, constraints, and objectives.\n\nstruct _Model{V <: Variable{<:AbstractDomain},C <: Constraint{<:Function},O <: Objective{<:Function}}\n    variables::Dictionary{Int,V}\n    constraints::Dictionary{Int,C}\n    objectives::Dictionary{Int,O}\n\n    # counter to add new variables: vars, cons, objs\n    max_vars::Ref{Int}\n    max_cons::Ref{Int}\n    max_objs::Ref{Int}\n\n    # Bool to indicate if the _Model instance has been specialized (relatively to types)\n    specialized::Ref{Bool}\n\n    # Symbol to indicate the kind of model for specialized methods such as pretty printing\n    kind::Symbol\nend\n\n\n\n\n\n","category":"type"},{"location":"internals/#LocalSearchSolvers._State","page":"Internals","title":"LocalSearchSolvers._State","text":"_State{T <: Number}\n\nA mutable structure to store the internal state of a solver. All methods applied to _State are forwarded to S <: AbstractSolver.\n\nmutable struct _State{T <: Number}\n    values::Dictionary{Int,T} # TODO: handle multiple value type\n    vars_costs::Dictionary{Int,Float64}\n    cons_costs::Dictionary{Int,Float64}\n    error::Float64\n    tabu::Dictionary{Int,Int}\n    optimizing::Bool\n    best_solution::Dictionary{Int,T}\n    best_solution_value::Union{Nothing,T}\nend\n\n\n\n\n\n","category":"type"},{"location":"internals/#LocalSearchSolvers._SubSolver","page":"Internals","title":"LocalSearchSolvers._SubSolver","text":"_SubSolver <: AbstractSolver\n\nAn internal solver type called by Solver when multithreading is enabled.\n\nArguments:\n\nid::Int: subsolver id for debugging\nmodel::Model: a ref to the model of the main solver\nstate::_State: a deepcopy of the main solver that evolves independently\noptions::Options: a ref to the options of the main solver\n\n\n\n\n\n","category":"type"},{"location":"internals/#LocalSearchSolvers._SubSolver-Tuple{Solver,Any}","page":"Internals","title":"LocalSearchSolvers._SubSolver","text":"_SubSolver(ms::Solver, id)\n\nInternal structure used in multithreading and distributed version of the solvers. It is only created at the start of a solve! run. Its behaviour regarding to sharing information is determined by the main Solver.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.Multimedia.display-Tuple{Any,LocalSearchSolvers.SudokuInstance}","page":"Internals","title":"Base.Multimedia.display","text":"display(io::IO, S::SudokuInstance)\ndisplay(S::SudokuInstance) # default to stdout\n\nDisplays an ntimes n SudokuInstance.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.Multimedia.display-Tuple{Any,Val{:sudoku}}","page":"Internals","title":"Base.Multimedia.display","text":"Base.display(X, Val(:sudoku))\n\nExtends Base.display to a sudoku configuration.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.Multimedia.display-Tuple{Dictionaries.Dictionary}","page":"Internals","title":"Base.Multimedia.display","text":"Base.display(X::Dictionary)\n\nExtends Base.display to a sudoku configuration.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.Multimedia.display-Tuple{LocalSearchSolvers.SudokuInstance}","page":"Internals","title":"Base.Multimedia.display","text":"Base.display(S::SudokuInstance)\n\nExtends Base.display to SudokuInstance.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.copy-Tuple{DiscreteSet}","page":"Internals","title":"Base.copy","text":"Base.copy(set::DiscreteSet) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.copy-Tuple{LocalSearchSolvers.MOIError}","page":"Internals","title":"Base.copy","text":"Base.copy(set::MOIError) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.empty!-Tuple{LocalSearchSolvers._Model}","page":"Internals","title":"Base.empty!","text":"empty!(m::Model)\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.empty!-Tuple{LocalSearchSolvers._State}","page":"Internals","title":"Base.empty!","text":"empty!(s::_State)\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.empty!-Tuple{Solver}","page":"Internals","title":"Base.empty!","text":"empty!(s::Solver)\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.getindex-Tuple{LocalSearchSolvers.SudokuInstance,Int64}","page":"Internals","title":"Base.getindex","text":"Base.getindex(S::SudokuInstance, i::Int)\nBase.getindex(S::SudokuInstance, I::Vararg{Int,N}) where {N}\n\nExtends Base.getindex for SudokuInstance.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.setindex!-Tuple{LocalSearchSolvers.SudokuInstance,Any,Any}","page":"Internals","title":"Base.setindex!","text":"Base.setindex!(S::SudokuInstance, v, i::Int)\nBase.setindex!(S::SudokuInstance, v, I::Vararg{Int,N})\n\nExtends Base.setindex! for SudokuInstance.\n\n\n\n\n\n","category":"method"},{"location":"internals/#Base.size-Tuple{LocalSearchSolvers.SudokuInstance}","page":"Internals","title":"Base.size","text":"Base.size(S::SudokuInstance)\n\nExtends Base.size for SudokuInstance.\n\n\n\n\n\n","category":"method"},{"location":"internals/#ConstraintDomains._add!-Tuple{LocalSearchSolvers.Constraint,Any}","page":"Internals","title":"ConstraintDomains._add!","text":"_add!(c::Constraint, x)\n\nAdd the variable of indice x to c.\n\n\n\n\n\n","category":"method"},{"location":"internals/#ConstraintDomains._delete!-Tuple{LocalSearchSolvers.Constraint,Any}","page":"Internals","title":"ConstraintDomains._delete!","text":"_delete!(c::Constraint, x::Int)\n\nDelete x from c.\n\n\n\n\n\n","category":"method"},{"location":"internals/#ConstraintDomains._get_domain-Tuple{LocalSearchSolvers.Variable}","page":"Internals","title":"ConstraintDomains._get_domain","text":"_get_domain(x::Variable) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#ConstraintDomains._length-Tuple{LocalSearchSolvers.Constraint}","page":"Internals","title":"ConstraintDomains._length","text":"_length(c::Constraint)\n\nReturn the number of constrained variables by c.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JuMP.build_variable-Union{Tuple{T}, Tuple{Function,JuMP.VariableInfo,T}} where T<:MathOptInterface.AbstractScalarSet","page":"Internals","title":"JuMP.build_variable","text":"JuMP.build_variable(::Function, info::JuMP.VariableInfo, set::T) where T <: MOI.AbstractScalarSet\n\nDOCSTRING\n\nArguments:\n\n``: DESCRIPTION\ninfo: DESCRIPTION\nset: DESCRIPTION\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._add_to_constraint!-Tuple{LocalSearchSolvers.Variable,Any}","page":"Internals","title":"LocalSearchSolvers._add_to_constraint!","text":"_add_to_constraint!(x::Variable, id)\n\nAdd a constraint id to the list of contraints of x.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._best!-Union{Tuple{T}, Tuple{LocalSearchSolvers._State,Union{Nothing, T}}, Tuple{LocalSearchSolvers._State,Union{Nothing, T},Any}} where T<:Number","page":"Internals","title":"LocalSearchSolvers._best!","text":"_best!(s::S, val, values = Dictionary()) where S <: Union{_State, AbstractSolver}\n\nSet the best known value to val and, if values not empty, the best known solution.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._best-Tuple{LocalSearchSolvers._State}","page":"Internals","title":"LocalSearchSolvers._best","text":"_best(s::S) where S <: Union{_State, AbstractSolver}\n\nAccess the best known solution value (defined for optimization models only).\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._check_restart-Tuple{Any}","page":"Internals","title":"LocalSearchSolvers._check_restart","text":"_check_restart(s)\n\nCheck if a restart of s is necessary. If s has subsolvers, this check is independent for all of them.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._check_subs-Tuple{Any}","page":"Internals","title":"LocalSearchSolvers._check_subs","text":"_check_subs(s)\n\nCheck if any subsolver of a main solver s, for\n\nSatisfaction, has a solution, then return it, resume the run otherwise\nOptimization, has a better solution, then assign it to its internal state\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._compute!-Tuple{Any}","page":"Internals","title":"LocalSearchSolvers._compute!","text":"_compute!(s; o::Int = 1, cons_lst = Indices{Int}())\n\nCompute the objective o's value if s is satisfied and return the current error.\n\nArguments:\n\ns: a solver\no: targeted objective\ncons_lst: list of targeted constraints, if empty compute for the whole set\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._compute_cost!-Tuple{Any,Any,Any}","page":"Internals","title":"LocalSearchSolvers._compute_cost!","text":"_compute_cost!(s, ind, c)\n\nCompute the cost of constraint c with index ind.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._compute_costs!-Tuple{Any}","page":"Internals","title":"LocalSearchSolvers._compute_costs!","text":"_compute_costs!(s; cons_lst::Indices{Int} = Indices{Int}())\n\nCompute the cost of constraints c in cons_lst. If cons_lst is empty, compute the cost for all the constraints in s.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._compute_objective!-Tuple{Any,LocalSearchSolvers.Objective}","page":"Internals","title":"LocalSearchSolvers._compute_objective!","text":"_compute_objective!(s, o::Objective)\n_compute_objective!(s, o = 1)\n\nCompute the objective o's value.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._cons_cost!-Tuple{LocalSearchSolvers._State,Any,Any}","page":"Internals","title":"LocalSearchSolvers._cons_cost!","text":"_cons_cost!(s::S, c, cost) where S <: Union{_State, AbstractSolver}\n\nSet the cost of constraint c.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._cons_cost-Tuple{LocalSearchSolvers._State,Any}","page":"Internals","title":"LocalSearchSolvers._cons_cost","text":"_cons_cost(s::S, c) where S <: Union{_State, AbstractSolver}\n\nReturn the cost of constraint c.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._cons_costs!-Tuple{LocalSearchSolvers._State,Any}","page":"Internals","title":"LocalSearchSolvers._cons_costs!","text":"_cons_costs!(s::S, costs) where S <: Union{_State, AbstractSolver}\n\nSet the constraints costs.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._cons_costs-Tuple{LocalSearchSolvers._State}","page":"Internals","title":"LocalSearchSolvers._cons_costs","text":"_cons_costs(s::S) where S <: Union{_State, AbstractSolver}\n\nAccess the constraints costs.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._constriction-Tuple{LocalSearchSolvers.Variable}","page":"Internals","title":"LocalSearchSolvers._constriction","text":"_constriction(x::Variable)\n\nReturn the cosntriction of x, i.e. the number of constraints restricting x.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._decay_tabu!-Tuple{LocalSearchSolvers._State}","page":"Internals","title":"LocalSearchSolvers._decay_tabu!","text":"_decay_tabu!(s::S) where S <: Union{_State, AbstractSolver}\n\nDecay the tabu list.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._decrease_tabu!-Tuple{LocalSearchSolvers._State,Any}","page":"Internals","title":"LocalSearchSolvers._decrease_tabu!","text":"_decrease_tabu!(s::S, x) where S <: Union{_State, AbstractSolver}\n\nDecrement the tabu value of variable x.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._delete_from_constraint!-Tuple{LocalSearchSolvers.Variable,Any}","page":"Internals","title":"LocalSearchSolvers._delete_from_constraint!","text":"_delete_from_constraint!(x::Variable, id)\n\nDelete a constraint id from the list of contraints of x.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._delete_tabu!-Tuple{LocalSearchSolvers._State,Any}","page":"Internals","title":"LocalSearchSolvers._delete_tabu!","text":"_delete_tabu!(s::S, x) where S <: Union{_State, AbstractSolver}\n\nDelete the tabu entry of variable x.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._draw!-Tuple{Any}","page":"Internals","title":"LocalSearchSolvers._draw!","text":"_draw!(s)\n\nDraw a random (re-)starting configuration.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._dynamic!-Tuple{Any,Any}","page":"Internals","title":"LocalSearchSolvers._dynamic!","text":"_dynamic!(options, dynamic) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._dynamic-Tuple{Any}","page":"Internals","title":"LocalSearchSolvers._dynamic","text":"_dynamic(options) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._empty_tabu!-Tuple{LocalSearchSolvers._State}","page":"Internals","title":"LocalSearchSolvers._empty_tabu!","text":"_empty_tabu!(s::S) where S <: Union{_State, AbstractSolver}\n\nEmpty the tabu list.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._error!-Tuple{LocalSearchSolvers._State,Any}","page":"Internals","title":"LocalSearchSolvers._error!","text":"_error!(s::S, val) where S <: Union{_State, AbstractSolver}\n\nSet the error of the current state of s to val.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._error-Tuple{LocalSearchSolvers._State}","page":"Internals","title":"LocalSearchSolvers._error","text":"_error(s::S) where S <: Union{_State, AbstractSolver}\n\nAccess the error of the current state of s.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._find_rand_argmax-Tuple{Dictionaries.DictionaryView}","page":"Internals","title":"LocalSearchSolvers._find_rand_argmax","text":"_find_rand_argmax(d::DictionaryView)\n\nCompute argmax of d and select one element randomly.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._format_line-Tuple{Any,Any}","page":"Internals","title":"LocalSearchSolvers._format_line","text":"_format_line(r, M)\n\nFormat line of a sudoku grid.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._format_line_segment-Tuple{Any,Any,Any}","page":"Internals","title":"LocalSearchSolvers._format_line_segment","text":"_format_line_segment(r, col_pos, M)\n\nFormat line segment of a sudoku grid.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._format_val-Tuple{Any}","page":"Internals","title":"LocalSearchSolvers._format_val","text":"_format_val(a)\n\nFormat an integer a into a string for SudokuInstance.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._get_constraints-Tuple{LocalSearchSolvers.Variable}","page":"Internals","title":"LocalSearchSolvers._get_constraints","text":"_get_constraints(x::Variable)\n\nAccess the list of constraints of x.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._get_sep_line-Tuple{Any,Any,Any}","page":"Internals","title":"LocalSearchSolvers._get_sep_line","text":"_get_sep_line(s, pos_row, M)\n\nReturn a line separator.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._get_vars-Tuple{LocalSearchSolvers.Constraint}","page":"Internals","title":"LocalSearchSolvers._get_vars","text":"_get_vars(c::Constraint)\n\nReturns the variables constrained by c.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._inc_cons!-Tuple{LocalSearchSolvers._Model}","page":"Internals","title":"LocalSearchSolvers._inc_cons!","text":"_inc_vars!(m::M) where M <: Union{Model, AbstractSolver}\n\nIncrement the maximum constraint id that has been attributed to m.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._inc_objs!-Tuple{LocalSearchSolvers._Model}","page":"Internals","title":"LocalSearchSolvers._inc_objs!","text":"_inc_vars!(m::M) where M <: Union{Model, AbstractSolver}\n\nIncrement the maximum objective id that has been attributed to m.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._inc_vars!-Tuple{LocalSearchSolvers._Model}","page":"Internals","title":"LocalSearchSolvers._inc_vars!","text":"_inc_vars!(m::M) where M <: Union{Model, AbstractSolver}\n\nIncrement the maximum variable id that has been attributed to m.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._init_solve!-Tuple{LocalSearchSolvers._SubSolver}","page":"Internals","title":"LocalSearchSolvers._init_solve!","text":"_init_solve!(s::S) where S <: AbstractSolver\n\nInitialize a solver in both sequential and parallel contexts.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._insert_tabu!-Tuple{LocalSearchSolvers._State,Any,Any}","page":"Internals","title":"LocalSearchSolvers._insert_tabu!","text":"_insert_tabu!(s::S, x, tabu_time) where S <: Union{_State, AbstractSolver}\n\nInsert the bariable x as tabu for tabu_time.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._is_empty-Tuple{LocalSearchSolvers._Model}","page":"Internals","title":"LocalSearchSolvers._is_empty","text":"_is_empty(m::Model)\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._iteration!-Tuple{Any,Any}","page":"Internals","title":"LocalSearchSolvers._iteration!","text":"_iteration!(options, iterations) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._iteration-Tuple{Any}","page":"Internals","title":"LocalSearchSolvers._iteration","text":"_iteration(options) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._length_tabu-Tuple{LocalSearchSolvers._State}","page":"Internals","title":"LocalSearchSolvers._length_tabu","text":"_length_tabu!(s::S) where S <: Union{_State, AbstractSolver}\n\nReturn the length of the tabu list.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._max_cons-Tuple{LocalSearchSolvers._Model}","page":"Internals","title":"LocalSearchSolvers._max_cons","text":"_max_cons(m::M) where M <: Union{Model, AbstractSolver}\n\nAccess the maximum constraint id that has been attributed to m.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._max_objs-Tuple{LocalSearchSolvers._Model}","page":"Internals","title":"LocalSearchSolvers._max_objs","text":"_max_objs(m::M) where M <: Union{Model, AbstractSolver}\n\nAccess the maximum objective id that has been attributed to m.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._max_vars-Tuple{LocalSearchSolvers._Model}","page":"Internals","title":"LocalSearchSolvers._max_vars","text":"_max_vars(m::M) where M <: Union{Model, AbstractSolver}\n\nAccess the maximum variable id that has been attributed to m.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._move!","page":"Internals","title":"LocalSearchSolvers._move!","text":"_move!(s, x::Int, dim::Int = 0)\n\nPerform an improving move in x neighbourhood if possible.\n\nArguments:\n\ns: a solver of type S <: AbstractSolver\nx: selected variable id\ndim: describe the dimension of the considered neighbourhood\n\n\n\n\n\n","category":"function"},{"location":"internals/#LocalSearchSolvers._neighbours","page":"Internals","title":"LocalSearchSolvers._neighbours","text":"_neighbours(s, x, dim = 0)\n\nDOCSTRING\n\nArguments:\n\ns: DESCRIPTION\nx: DESCRIPTION\ndim: DESCRIPTION\n\n\n\n\n\n","category":"function"},{"location":"internals/#LocalSearchSolvers._optimizing!-Tuple{LocalSearchSolvers._State}","page":"Internals","title":"LocalSearchSolvers._optimizing!","text":"_optimizing!(s::S) where S <: Union{_State, AbstractSolver}\n\nSet the solver optimizing status to true.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._optimizing-Tuple{LocalSearchSolvers._State}","page":"Internals","title":"LocalSearchSolvers._optimizing","text":"_optimizing(s::S) where S <: Union{_State, AbstractSolver}\n\nCheck if s is in an optimizing state.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._print_level!-Tuple{Any,Any}","page":"Internals","title":"LocalSearchSolvers._print_level!","text":"_print_level!(options, level) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._print_level-Tuple{Any}","page":"Internals","title":"LocalSearchSolvers._print_level","text":"_print_level(options) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._restart!","page":"Internals","title":"LocalSearchSolvers._restart!","text":"_restart!(s, k = 10)\n\nRestart a solver.\n\n\n\n\n\n","category":"function"},{"location":"internals/#LocalSearchSolvers._satisfying!-Tuple{LocalSearchSolvers._State}","page":"Internals","title":"LocalSearchSolvers._satisfying!","text":"_satisfying!(s::S) where S <: Union{_State, AbstractSolver}\n\nSet the solver optimizing status to false.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._select_worse-Tuple{LocalSearchSolvers._State}","page":"Internals","title":"LocalSearchSolvers._select_worse","text":"_select_worse(s::S) where S <: Union{_State, AbstractSolver}\n\nWithin the non-tabu variables, select the one with the worse error .\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._set!-Tuple{LocalSearchSolvers._State,Any,Any}","page":"Internals","title":"LocalSearchSolvers._set!","text":"_set!(s::S, x, val) where S <: Union{_State, AbstractSolver}\n\nSet the value of variable x to val.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._set_domain!-Tuple{LocalSearchSolvers._Model,Any,Any}","page":"Internals","title":"LocalSearchSolvers._set_domain!","text":"_set_domain!(m::Model, x, values)\n\nDOCSTRING\n\nArguments:\n\nm: DESCRIPTION\nx: DESCRIPTION\nvalues: DESCRIPTION\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._solution!-Tuple{LocalSearchSolvers._State,Any}","page":"Internals","title":"LocalSearchSolvers._solution!","text":"_solution!(s::S, values) where S <: Union{_State, AbstractSolver}\n\nSet the best known solution to values.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._solution-Tuple{LocalSearchSolvers._State}","page":"Internals","title":"LocalSearchSolvers._solution","text":"_solution(s::S) where S <: Union{_State, AbstractSolver}\n\nAccess the best known solution.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._solutions!-Tuple{Any,Any}","page":"Internals","title":"LocalSearchSolvers._solutions!","text":"_solutions!(options, solutions) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._solutions-Tuple{Any}","page":"Internals","title":"LocalSearchSolvers._solutions","text":"_solutions(options) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._solve!-Tuple{Any,Any}","page":"Internals","title":"LocalSearchSolvers._solve!","text":"_solve!(s, stop)\n\nStart a solving run of a subsolver with a shared Atomic boolean stop.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._specialize!-Tuple{Any,Any}","page":"Internals","title":"LocalSearchSolvers._specialize!","text":"_specialize!(options, specialize) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._specialize-Tuple{Any}","page":"Internals","title":"LocalSearchSolvers._specialize","text":"_specialize(options) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._step!-Tuple{Any}","page":"Internals","title":"LocalSearchSolvers._step!","text":"_step!(s)\n\nIterate a step of the solver run.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._swap_value!-Tuple{LocalSearchSolvers._State,Any,Any}","page":"Internals","title":"LocalSearchSolvers._swap_value!","text":"_set!(s::S, x, y) where S <: Union{_State, AbstractSolver}\n\nSwap the values of variables x and y.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._tabu!-Tuple{LocalSearchSolvers._State,Any}","page":"Internals","title":"LocalSearchSolvers._tabu!","text":"_tabu!(s::S, tabu) where S <: Union{_State, AbstractSolver}\n\nSet the variables tabu list.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._tabu-Tuple{LocalSearchSolvers._State,Any}","page":"Internals","title":"LocalSearchSolvers._tabu","text":"_tabu(s::S, x) where S <: Union{_State, AbstractSolver}\n\nReturn the tabu value of variable x.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._tabu-Tuple{LocalSearchSolvers._State}","page":"Internals","title":"LocalSearchSolvers._tabu","text":"_tabu(s::S) where S <: Union{_State, AbstractSolver}\n\nAccess the list of tabu variables.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._tabu_delta!-Tuple{Any,Any}","page":"Internals","title":"LocalSearchSolvers._tabu_delta!","text":"_tabu_delta!(options, time) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._tabu_delta-Tuple{Any}","page":"Internals","title":"LocalSearchSolvers._tabu_delta","text":"_tabu_delta(options) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._tabu_local!-Tuple{Any,Any}","page":"Internals","title":"LocalSearchSolvers._tabu_local!","text":"_tabu_local!(options, time) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._tabu_local-Tuple{Any}","page":"Internals","title":"LocalSearchSolvers._tabu_local","text":"_tabu_local(options) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._tabu_time!-Tuple{Any,Any}","page":"Internals","title":"LocalSearchSolvers._tabu_time!","text":"_tabu_time!(options, time) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._tabu_time-Tuple{Any}","page":"Internals","title":"LocalSearchSolvers._tabu_time","text":"_tabu_time(options) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._threads!-Tuple{Any,Any}","page":"Internals","title":"LocalSearchSolvers._threads!","text":"_threads!(options, threads) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._threads-Tuple{Any}","page":"Internals","title":"LocalSearchSolvers._threads","text":"_threads(options) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._time_limit!-Tuple{Any,Dates.Time}","page":"Internals","title":"LocalSearchSolvers._time_limit!","text":"_time_limit!(options, time::Time) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._time_limit!-Tuple{Any,Int64}","page":"Internals","title":"LocalSearchSolvers._time_limit!","text":"_time_limit!(options, time::Int) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._time_limit-Tuple{Any}","page":"Internals","title":"LocalSearchSolvers._time_limit","text":"_time_limit(options) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._to_union-Tuple{Any}","page":"Internals","title":"LocalSearchSolvers._to_union","text":"_to_union(datatype)\n\nMake a minimal Union type from a collection of data types.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._value!-Tuple{LocalSearchSolvers._State,Any,Any}","page":"Internals","title":"LocalSearchSolvers._value!","text":"_value!(s::S, x, val) where S <: Union{_State, AbstractSolver}\n\nSet the value of variable x to val.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._value-Tuple{LocalSearchSolvers._State,Any}","page":"Internals","title":"LocalSearchSolvers._value","text":"_value(s::S, x) where S <: Union{_State, AbstractSolver}\n\nReturn the value of variable x.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._values!-Union{Tuple{T}, Tuple{LocalSearchSolvers._State{T},Any}} where T<:Number","page":"Internals","title":"LocalSearchSolvers._values!","text":"_values!(s::S, values) where S <: Union{_State, AbstractSolver}\n\nSet the variables values.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._values-Tuple{LocalSearchSolvers._State}","page":"Internals","title":"LocalSearchSolvers._values","text":"_vars_costs(s::S) where S <: Union{_State, AbstractSolver}\n\nAccess the variables costs.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._var_cost!-Tuple{LocalSearchSolvers._State,Any,Any}","page":"Internals","title":"LocalSearchSolvers._var_cost!","text":"_var_cost!(s::S, x, cost) where S <: Union{_State, AbstractSolver}\n\nSet the cost of variable x.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._var_cost-Tuple{LocalSearchSolvers._State,Any}","page":"Internals","title":"LocalSearchSolvers._var_cost","text":"_var_cost(s::S, x) where S <: Union{_State, AbstractSolver}\n\nReturn the cost of variable x.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._vars_costs!-Tuple{LocalSearchSolvers._State,Any}","page":"Internals","title":"LocalSearchSolvers._vars_costs!","text":"_vars_costs!(s::S, costs) where S <: Union{_State, AbstractSolver}\n\nSet the variables costs.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._vars_costs-Tuple{LocalSearchSolvers._State}","page":"Internals","title":"LocalSearchSolvers._vars_costs","text":"_vars_costs(s::S) where S <: Union{_State, AbstractSolver}\n\nAccess the variables costs.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers._verbose-Tuple{Any,Any}","page":"Internals","title":"LocalSearchSolvers._verbose","text":"_verbose(settings, str)\n\nTemporary logging function. #TODO: use better log instead (LoggingExtra.jl)\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers.domain_size-Tuple{LocalSearchSolvers._Model,Any}","page":"Internals","title":"LocalSearchSolvers.domain_size","text":"domain_size(m::Model, x) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers.get_kind-Tuple{LocalSearchSolvers._Model}","page":"Internals","title":"LocalSearchSolvers.get_kind","text":"get_kind(m::M) where M <: Union{Model, AbstractSolver}\n\nAccess the kind of m, such as :sudoku or :generic (default).\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers.is_sat-Tuple{LocalSearchSolvers._Model}","page":"Internals","title":"LocalSearchSolvers.is_sat","text":"is_sat(m::M) where M <: Union{Model, AbstractSolver}\n\nReturn true if m is a satisfaction model.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers.is_specialized-Tuple{LocalSearchSolvers._Model}","page":"Internals","title":"LocalSearchSolvers.is_specialized","text":"is_specialized(m::M) where M <: Union{Model, AbstractSolver}\n\nReturn true if the model is already specialized.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers.length_objs-Tuple{LocalSearchSolvers._Model}","page":"Internals","title":"LocalSearchSolvers.length_objs","text":"length_objs(m::M) where M <: Union{Model, AbstractSolver}\n\nReturn the number of objectives in m.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers.length_vars-Tuple{LocalSearchSolvers._Model}","page":"Internals","title":"LocalSearchSolvers.length_vars","text":"length_vars(m::M) where M <: Union{Model, AbstractSolver}\n\nReturn the number of variables in m.\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers.max_domains_size-Tuple{LocalSearchSolvers._Model,Any}","page":"Internals","title":"LocalSearchSolvers.max_domains_size","text":"max_domains_size(m::Model, vars) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#LocalSearchSolvers.set_status!-Tuple{LocalSearchSolvers.Optimizer,Symbol}","page":"Internals","title":"LocalSearchSolvers.set_status!","text":"set_status!(optimizer::Optimizer, status::Symbol)\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#MathOptInterface.Utilities.supports_default_copy_to-Tuple{LocalSearchSolvers.Optimizer,Bool}","page":"Internals","title":"MathOptInterface.Utilities.supports_default_copy_to","text":"Copy constructor for the optimizer\n\n\n\n\n\n","category":"method"},{"location":"internals/#MathOptInterface.add_constraint-Tuple{LocalSearchSolvers.Optimizer,MathOptInterface.VectorOfVariables,LocalSearchSolvers.MOIError}","page":"Internals","title":"MathOptInterface.add_constraint","text":"MOI.add_constraint(optimizer::Optimizer, vars::MOI.VectorOfVariables, set::MOIError)\n\nDOCSTRING\n\nArguments:\n\noptimizer: DESCRIPTION\nvars: DESCRIPTION\nset: DESCRIPTION\n\n\n\n\n\n","category":"method"},{"location":"internals/#MathOptInterface.add_constraint-Union{Tuple{T}, Tuple{LocalSearchSolvers.Optimizer,MathOptInterface.SingleVariable,DiscreteSet{T}}} where T<:Number","page":"Internals","title":"MathOptInterface.add_constraint","text":"MOI.add_constraint(optimizer::Optimizer, v::SVF, set::DiscreteSet{T}) where T <: Number\n\nDOCSTRING\n\nArguments:\n\noptimizer: DESCRIPTION\nv: DESCRIPTION\nset: DESCRIPTION\n\n\n\n\n\n","category":"method"},{"location":"internals/#MathOptInterface.add_variable-Tuple{LocalSearchSolvers.Optimizer}","page":"Internals","title":"MathOptInterface.add_variable","text":"MOI.add_variable(model::Optimizer) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#MathOptInterface.empty!-Tuple{Any}","page":"Internals","title":"MathOptInterface.empty!","text":"MOI.empty!(opt) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#MathOptInterface.get-Tuple{LocalSearchSolvers.Optimizer,MathOptInterface.SolverName}","page":"Internals","title":"MathOptInterface.get","text":"MOI.get(::Optimizer, ::MOI.SolverName) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#MathOptInterface.is_empty-Tuple{LocalSearchSolvers.Optimizer}","page":"Internals","title":"MathOptInterface.is_empty","text":"MOI.is_empty(model::Optimizer) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"internals/#MathOptInterface.optimize!-Tuple{LocalSearchSolvers.Optimizer}","page":"Internals","title":"MathOptInterface.optimize!","text":"MOI.optimize!(model::Optimizer)\n\n\n\n\n\n","category":"method"},{"location":"internals/#MathOptInterface.set","page":"Internals","title":"MathOptInterface.set","text":"MOI.set(::Optimizer, ::MOI.Silent, bool = true) = begin\n\nDOCSTRING\n\nArguments:\n\n``: DESCRIPTION\n``: DESCRIPTION\nbool: DESCRIPTION\n\n\n\n\n\n","category":"function"},{"location":"internals/#MathOptInterface.supports_constraint-Tuple{LocalSearchSolvers.Optimizer,Type{MathOptInterface.VectorOfVariables},Type{LocalSearchSolvers.MOIError}}","page":"Internals","title":"MathOptInterface.supports_constraint","text":"MOI.supports_constraint(::Optimizer, ::Type{VOV}, ::Type{MOIError}) = begin\n\nDOCSTRING\n\nArguments:\n\n``: DESCRIPTION\n``: DESCRIPTION\n``: DESCRIPTION\n\n\n\n\n\n","category":"method"},{"location":"constraints/#Constraints","page":"Constraints","title":"Constraints","text":"","category":"section"},{"location":"constraints/","page":"Constraints","title":"Constraints","text":"In the LocalSearchSolvers.jl framework, a constraint can be define using either a concept (a predicate over a set of variables) or an error function. Additionally some constraints are already defined in  Constraints.jl. ","category":"page"},{"location":"constraints/#Predicates-and-Error-Functions","page":"Constraints","title":"Predicates and Error Functions","text":"","category":"section"},{"location":"constraints/","page":"Constraints","title":"Constraints","text":"LocalSearchSolvers.Predicate\nLocalSearchSolvers.Error","category":"page"},{"location":"constraints/#LocalSearchSolvers.Predicate","page":"Constraints","title":"LocalSearchSolvers.Predicate","text":"Predicate{F <: Function} <: JuMP.AbstractVectorSet\n\nAssuming X is a (collection of) variables, concept a boolean function over X, and that a model is defined. In JuMP syntax we can create a constraint based on concept as follows.\n\n@constraint(model, X in Predicate(concept))\n\n\n\n\n\n","category":"type"},{"location":"constraints/#LocalSearchSolvers.Error","page":"Constraints","title":"LocalSearchSolvers.Error","text":"Error{F <: Function} <: JuMP.AbstractVectorSet\n\nThe solver will compute a straightforward error function based on the concept. To run the solver efficiently, it is possible to provide an error function err instead of concept. err must return a nonnegative real number.\n\n@constraint(model, X in Error(err))\n\n\n\n\n\n","category":"type"},{"location":"constraints/","page":"Constraints","title":"Constraints","text":"Finally, one can compute the error function from a concept automatically using Interpretable Compositional Networks (ICN). Automatic computation through the CompositionalNetworks.jl package will soon be added within the JuMP syntax. In the mean time, please use this dependency directly.","category":"page"},{"location":"constraints/#Usual-Constraints","page":"Constraints","title":"Usual Constraints","text":"","category":"section"},{"location":"constraints/","page":"Constraints","title":"Constraints","text":"Some usual constraints are already available directly through JuMP syntax. Do not hesitate to file an issue to include more usual constraints.","category":"page"},{"location":"constraints/","page":"Constraints","title":"Constraints","text":"LocalSearchSolvers.AllDifferent\nLocalSearchSolvers.AllEqual\nLocalSearchSolvers.AllEqualParam\nLocalSearchSolvers.AlwaysTrue\nLocalSearchSolvers.DistDifferent\nLocalSearchSolvers.Eq\nLocalSearchSolvers.Ordered","category":"page"},{"location":"constraints/#LocalSearchSolvers.AllDifferent","page":"Constraints","title":"LocalSearchSolvers.AllDifferent","text":"Global constraint ensuring that all the values of a given configuration are unique.\n\n@constraint(model, X in AllDifferent())\n\n\n\n\n\n","category":"type"},{"location":"constraints/#LocalSearchSolvers.AllEqual","page":"Constraints","title":"LocalSearchSolvers.AllEqual","text":"Global constraint ensuring that all the values of X are all equal.\n\n@constraint(model, X in AllEqual())\n\n\n\n\n\n","category":"type"},{"location":"constraints/#LocalSearchSolvers.AllEqualParam","page":"Constraints","title":"LocalSearchSolvers.AllEqualParam","text":"Global constraint ensuring that all the values of X are all equal to a given parameter param.\n\n@constraint(model, X in AllEqualParam(param))\n\n\n\n\n\n","category":"type"},{"location":"constraints/#LocalSearchSolvers.AlwaysTrue","page":"Constraints","title":"LocalSearchSolvers.AlwaysTrue","text":"Always return true. Mainly used for testing purpose.\n\n@constraint(model, X in AlwaysTrue())\n\n\n\n\n\n","category":"type"},{"location":"constraints/#LocalSearchSolvers.DistDifferent","page":"Constraints","title":"LocalSearchSolvers.DistDifferent","text":"Local constraint ensuring that, given a vector X of size 4, |X[1] - X[2]| ≠ |X[3] - X[4]|).\n\n@constraint(model, X in DistDifferent())\n\n\n\n\n\n","category":"type"},{"location":"constraints/#LocalSearchSolvers.Eq","page":"Constraints","title":"LocalSearchSolvers.Eq","text":"Equality between two variables.\n\n@constraint(model, X in Eq())\n\n\n\n\n\n","category":"type"},{"location":"constraints/#LocalSearchSolvers.Ordered","page":"Constraints","title":"LocalSearchSolvers.Ordered","text":"Global constraint ensuring that all the values of x are ordered.\n\n@constraint(model, X in Ordered())\n\n\n\n\n\n","category":"type"},{"location":"objectives/#Objectives","page":"Objectives","title":"Objectives","text":"","category":"section"},{"location":"objectives/","page":"Objectives","title":"Objectives","text":"Once a satisfying solution has been reached, the solver will try to minimize the provided objective function if any.","category":"page"},{"location":"objectives/#JuMP-syntax-(recommended)","page":"Objectives","title":"JuMP syntax (recommended)","text":"","category":"section"},{"location":"objectives/","page":"Objectives","title":"Objectives","text":"LocalSearchSolvers.ScalarFunction","category":"page"},{"location":"objectives/#LocalSearchSolvers.ScalarFunction","page":"Objectives","title":"LocalSearchSolvers.ScalarFunction","text":"ScalarFunction{F <: Function, V <: Union{Nothing, VOV}} <: MOI.AbstractScalarFunction\n\nA container to express any function with real value in JuMP syntax. Used with the @objective macro.\n\nArguments:\n\nf::F: function to be applied to X\nX::V: a subset of the variables of the model.\n\nGiven a model, and some (collection of) variables X to optimize. an objective function f can be added as follows. Note that only Min for minimization us currently defined. Max will come soon.\n\n# Applies to all variables in order of insertion.\n# Recommended only when the function argument order does not matter.\n@objective(model, ScalarFunction(f))\n\n# Generic use\n@objective(model, ScalarFunction(f, X))\n\n\n\n\n\n","category":"type"},{"location":"mincut/#Mincut","page":"Mincut","title":"Mincut","text":"","category":"section"},{"location":"mincut/","page":"Mincut","title":"Mincut","text":"Doc is still in construction. Please check models/mincut.jl for details on the implementation.","category":"page"},{"location":"mincut/#Constructing-a-Mincut-model","page":"Mincut","title":"Constructing a Mincut model","text":"","category":"section"},{"location":"mincut/","page":"Mincut","title":"Mincut","text":"Note that the Interdiction Cut problem is NP-hard.","category":"page"},{"location":"mincut/","page":"Mincut","title":"Mincut","text":"LocalSearchSolvers.mincut","category":"page"},{"location":"mincut/#LocalSearchSolvers.mincut","page":"Mincut","title":"LocalSearchSolvers.mincut","text":"mincut(graph::AbstractMatrix{T}; source::Int, sink::Int, interdiction::Int = 0) where T <: Number\n\nCompute the minimum cut of a graph.\n\nArguments:\n\ngraph: Any matrix <: AbstractMatrix that describes the capacities of the graph\nsource: Id of the source node; must be set\nsink: Id of the sink node; must be set\ninterdiction: indicates the number of forbidden links\n\n\n\n\n\n","category":"function"},{"location":"variables/#Variables","page":"Variables","title":"Variables","text":"","category":"section"},{"location":"variables/#Domains","page":"Variables","title":"Domains","text":"","category":"section"},{"location":"variables/","page":"Variables","title":"Variables","text":"In the LocalSearchSolvers.jl framework, a variable is mainly defined by its domain. A domain can be continuous, discrete, or mixed. All the domain implementation is available at ConstraintDomains.jl. ","category":"page"},{"location":"variables/","page":"Variables","title":"Variables","text":"Currently, only discrete domains are available.","category":"page"},{"location":"variables/","page":"Variables","title":"Variables","text":"Domains can be used both statically or dynamically. ","category":"page"},{"location":"variables/#JuMP-syntax-(recommended)","page":"Variables","title":"JuMP syntax (recommended)","text":"","category":"section"},{"location":"variables/","page":"Variables","title":"Variables","text":"# free variable named x\n@variable(model, x)\n\n# free variables in a X vector\n@varialbe(model, X[1:5])\n\n# variables with discrete domain 1:9 in a matrix M\n@variable(model, M[1:9,1:9] in DiscreteDomain(1:9))","category":"page"},{"location":"quickstart/#Quick-Start-Guide","page":"Quick Start Guide","title":"Quick Start Guide","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start Guide","title":"Quick Start Guide","text":"This section introduce the main concepts of LocalSearchSolvers.jl. We model both a satisfaction and an optimization version of the Golomb Ruler problem. For this quickstart, we will use JuMP.jl syntax.","category":"page"},{"location":"quickstart/#Golomb-Ruler","page":"Quick Start Guide","title":"Golomb Ruler","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start Guide","title":"Quick Start Guide","text":"From Wikipedia's English page.","category":"page"},{"location":"quickstart/","page":"Quick Start Guide","title":"Quick Start Guide","text":"In mathematics, a Golomb ruler is a set of marks at integer positions along an imaginary ruler such that no two pairs of marks are the same distance apart. The number of marks on the ruler is its order, and the largest distance between two of its marks is its length. Translation and reflection of a Golomb ruler are considered trivial, so the smallest mark is customarily put at 0 and the next mark at the smaller of its two possible values.","category":"page"},{"location":"quickstart/","page":"Quick Start Guide","title":"Quick Start Guide","text":"(Image: )","category":"page"},{"location":"quickstart/#Satisfaction-version","page":"Quick Start Guide","title":"Satisfaction version","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start Guide","title":"Quick Start Guide","text":"Given a number of marks n and a ruler length L, we can model our problem in Julia as easily as follows. First create an empty problem.","category":"page"},{"location":"quickstart/","page":"Quick Start Guide","title":"Quick Start Guide","text":"using LocalSearchSolvers # a CBLS alias is exported\nusing JuMP\n\nmodel = Model(CBLS.Optimizer)","category":"page"},{"location":"quickstart/","page":"Quick Start Guide","title":"Quick Start Guide","text":"Then add n variables with domain 0:L.","category":"page"},{"location":"quickstart/","page":"Quick Start Guide","title":"Quick Start Guide","text":"n = 4 # marks\nL = n^2 # ruler length\n@variable(model, X[1:n], DiscreteSet(0:L))","category":"page"},{"location":"quickstart/","page":"Quick Start Guide","title":"Quick Start Guide","text":"Finally add the following constraints,","category":"page"},{"location":"quickstart/","page":"Quick Start Guide","title":"Quick Start Guide","text":"all marks have a different value\nmarks are ordered (optional)\nfinally, no two pairs of marks are the same distance appart","category":"page"},{"location":"quickstart/","page":"Quick Start Guide","title":"Quick Start Guide","text":"@constraint(model, X in AllDifferent()) # different marks\n@constraint(model, X in Ordered()) # for output layout, keep them ordered\n\n# No two pairs have the same length\nfor i in 1:(n - 1), j in (i + 1):n, k in i:(n - 1), l in (k + 1):n\n    (i, j) < (k, l) || continue\n    @constraint(model, [X[i], X[j], X[k], X[l]] in DistDifferent())\nend","category":"page"},{"location":"quickstart/#Optimization-version","page":"Quick Start Guide","title":"Optimization version","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start Guide","title":"Quick Start Guide","text":"A Golomb ruler can be either optimally dense (maximal m for a given L) or optimally short (minimal L for a given n). Until LocalSearchSolvers.jl implements dynamic problems, only optimal shortness is provided.","category":"page"},{"location":"quickstart/","page":"Quick Start Guide","title":"Quick Start Guide","text":"The model objective is then to minimize the maximum distance between the two extrema marks in the ruler. As the domains are positive, we can simply minimize the maximum value.","category":"page"},{"location":"quickstart/","page":"Quick Start Guide","title":"Quick Start Guide","text":"@objective(model, Min, ScalarFunction(maximum))","category":"page"},{"location":"quickstart/#Ruling-the-solver","page":"Quick Start Guide","title":"Ruling the solver","text":"","category":"section"},{"location":"quickstart/","page":"Quick Start Guide","title":"Quick Start Guide","text":"For either version, the solver is built and run in a similar way. Please note that the satisfaction one will stop if a solution is found. The other will run until the maximum number of iteration is reached (1000 by default).","category":"page"},{"location":"quickstart/","page":"Quick Start Guide","title":"Quick Start Guide","text":"optimize!(model)","category":"page"},{"location":"quickstart/","page":"Quick Start Guide","title":"Quick Start Guide","text":"And finally retrieve the (best-known) solution info.","category":"page"},{"location":"quickstart/","page":"Quick Start Guide","title":"Quick Start Guide","text":"result = value.(X)\n@info \"Golomb marks: $result\"","category":"page"},{"location":"quickstart/","page":"Quick Start Guide","title":"Quick Start Guide","text":"Please note, that the Golomb Ruler is already implemented in the package as golomb(n::Int, L::Int=n^2).","category":"page"},{"location":"solving/#Modeling-and-solving","page":"Solving","title":"Modeling and solving","text":"","category":"section"},{"location":"solving/","page":"Solving","title":"Solving","text":"Ideally, given a problem, one just want to model and solve. That is what LocalSearchSolvers is aiming for. Here we only provide JuMP syntax.","category":"page"},{"location":"solving/#Model","page":"Solving","title":"Model","text":"","category":"section"},{"location":"solving/","page":"Solving","title":"Solving","text":"using LocalSearchSolvers, JuMP\n\nmodel = Model(CBLS.Optimizer) # CBLS is an exported alias of LocalSearchSolvers\n\n# add variables (cf Variables section)\n# add constraints (cf Constraints section)\n# add objective (cf Objectives section)","category":"page"},{"location":"solving/#Solver","page":"Solving","title":"Solver","text":"","category":"section"},{"location":"solving/","page":"Solving","title":"Solving","text":"# run the solver. If no objectives are provided, it will look for a satisfying solution\noptimize!(model)\n\n# extract the values (assuming X, a (collection of) variable(s) is the target)\nsolution = value.(X)","category":"page"},{"location":"solving/#Solver-options","page":"Solving","title":"Solver options","text":"","category":"section"},{"location":"solving/","page":"Solving","title":"Solving","text":"Several solver options are available, such as time and iteration limits. Please check the following list. (TODO:)","category":"page"},{"location":"public/#Public","page":"Public","title":"Public","text":"","category":"section"},{"location":"public/","page":"Public","title":"Public","text":"Pages = [\"public.md\"]\nDepth = 5","category":"page"},{"location":"public/","page":"Public","title":"Public","text":"Modules = [LocalSearchSolvers]\nPrivate = false","category":"page"},{"location":"public/#LocalSearchSolvers.DiscreteSet","page":"Public","title":"LocalSearchSolvers.DiscreteSet","text":"DiscreteSet(values)\n\n\n\n\n\n","category":"type"},{"location":"public/#LocalSearchSolvers.Options","page":"Public","title":"LocalSearchSolvers.Options","text":"Options\n\nDOCSTRING\n\nArguments:\n\ndynamic::Bool: DESCRIPTION\niteration::Union{Int, Float64}: DESCRIPTION\nprint_level::Symbol: DESCRIPTION\nsolutions::Int: DESCRIPTION\nspecialize::Bool: DESCRIPTION\ntabu_time::Int: DESCRIPTION\ntabu_local::Int: DESCRIPTION\ntabu_delta::Float64: DESCRIPTION\nthreads::Int: DESCRIPTION\ntime_limit::Union{Time}: DESCRIPTION\n`function Options(; dynamic = false, iteration = 1000, printlevel = :minimal, solutions = 1, specialize = !dynamic, tabutime = 0, tabulocal = 0, tabudelta = 0.0, threads = typemax(0), timelimit = Time(0))   #= none:13 =#   #= none:25 =#   dsstr = \"The model types are specialized to the starting domains, constraints,\" * \" and objectives types. Dynamic elements that add a new type will raise an error!\"   #= none:27 =#   notdsstr = \"The solver types are not specialized in a static model context,\" * \" which is sub-optimal.\"   #= none:29 =#   dynamic && (specialize && #= none:29 =# @warn(dsstr))   #= none:30 =#   !dynamic && (!specialize && #= none:30 =# @info(notdsstr))   #= none:32 =#   new(dynamic, iteration, printlevel, solutions, specialize, tabutime, tabulocal, tabudelta, threads, timelimit)\n\nend`: DESCRIPTION\n\n\n\n\n\n","category":"type"},{"location":"public/#LocalSearchSolvers.Solver","page":"Public","title":"LocalSearchSolvers.Solver","text":"Solver <: AbstractSolver\n\nMain solver. Handle the solving of a model, and optional multithreaded and/or distributed subsolvers.\n\nArguments:\n\nmodel::Model: A formal description of the targeted problem\nstate::_State: An internal state to store the info necessary to a solving run\noptions::Options: User options for this solver\nsubs::Vector{_SubSolver}: Optional subsolvers\n\n\n\n\n\n","category":"type"},{"location":"public/#LocalSearchSolvers.Solver-Union{Tuple{LocalSearchSolvers._Model}, Tuple{T}, Tuple{LocalSearchSolvers._Model,Options}} where T<:Number","page":"Public","title":"LocalSearchSolvers.Solver","text":"Solver{T}(m::Model; values::Dictionary{Int,T}=Dictionary{Int,T}()) where T <: Number\nSolver{T}(;\n    variables::Dictionary{Int,Variable}=Dictionary{Int,Variable}(),\n    constraints::Dictionary{Int,Constraint}=Dictionary{Int,Constraint}(),\n    objectives::Dictionary{Int,Objective}=Dictionary{Int,Objective}(),\n    values::Dictionary{Int,T}=Dictionary{Int,T}(),\n) where T <: Number\n\nConstructor for a solver. Optional starting values can be provided.\n\n# Model a sudoku model of size 4×4\nm = sudoku(2)\n\n# Create a solver instance with variables taking integral values\ns = Solver{Int}(m)\n\n# Solver with an empty model to be filled later and expected Float64 values\ns = Solver{Float64}()\n\n# Construct a solver from a sets of constraints, objectives, and variables.\ns = Solver{Int}(\n    variables = get_constraints(m),\n    constraints = get_constraints(m),\n    objectives = get_objectives(m)\n)\n\n\n\n\n\n","category":"method"},{"location":"public/#Base.:∈-Tuple{Int64,LocalSearchSolvers.Constraint}","page":"Public","title":"Base.:∈","text":"var::Int ∈ c::Constraint\n\n\n\n\n\n","category":"method"},{"location":"public/#Base.:∈-Tuple{LocalSearchSolvers.Variable,Any}","page":"Public","title":"Base.:∈","text":"∈(x::Variable, constraint)\n∈(value, x::Variable)\n\nCheck if a variable x is restricted by a constraint::Int, or if a value belongs to the domain of x.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.add!-Tuple{LocalSearchSolvers._Model,LocalSearchSolvers.Variable}","page":"Public","title":"LocalSearchSolvers.add!","text":"add!(m::M, x) where M <: Union{Model, AbstractSolver}\nadd!(m::M, c) where M <: Union{Model, AbstractSolver}\nadd!(m::M, o) where M <: Union{Model, AbstractSolver}\n\nAdd a variable x, a constraint c, or an objective o to m.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.add_value!-Tuple{LocalSearchSolvers._Model,Any,Any}","page":"Public","title":"LocalSearchSolvers.add_value!","text":"add_value!(m::M, x, val) where M <: Union{Model, AbstractSolver}\n\nAdd val to x domain.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.add_var_to_cons!-Tuple{LocalSearchSolvers._Model,Any,Any}","page":"Public","title":"LocalSearchSolvers.add_var_to_cons!","text":"add_var_to_cons!(m::M, c, x) where M <: Union{Model, AbstractSolver}\n\nAdd x to the constraint c list of restricted variables.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.constraint!-Union{Tuple{V}, Tuple{LocalSearchSolvers._Model,Any,V}} where V<:(AbstractArray{var\"#s68\",1} where var\"#s68\"<:Number)","page":"Public","title":"LocalSearchSolvers.constraint!","text":"constraint!(m::M, func, vars) where M <: Union{Model, AbstractSolver}\n\nAdd a constraint with an error function func defined over variables vars.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.constraint-Tuple{Any,Any}","page":"Public","title":"LocalSearchSolvers.constraint","text":"constraint(f, vars)\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.constriction-Tuple{LocalSearchSolvers._Model,Any}","page":"Public","title":"LocalSearchSolvers.constriction","text":"constriction(m::M, x) where M <: Union{Model, AbstractSolver}\n\nReturn the constriction of variable x.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.delete_value!-Tuple{LocalSearchSolvers._Model,Any,Any}","page":"Public","title":"LocalSearchSolvers.delete_value!","text":"delete_value(m::M, x, val) where M <: Union{Model, AbstractSolver}\n\nDelete val from x domain.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.delete_var_from_cons!-Tuple{LocalSearchSolvers._Model,Any,Any}","page":"Public","title":"LocalSearchSolvers.delete_var_from_cons!","text":"delete_var_from_cons(m::M, c, x) where M <: Union{Model, AbstractSolver}\n\nDelete x from the constraint c list of restricted variables.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.describe-Tuple{LocalSearchSolvers._Model}","page":"Public","title":"LocalSearchSolvers.describe","text":"describe(m::M) where M <: Union{Model, AbstractSolver}\n\nDescribe the model.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.draw-Tuple{LocalSearchSolvers._Model,Any}","page":"Public","title":"LocalSearchSolvers.draw","text":"draw(m::M, x) where M <: Union{Model, AbstractSolver}\n\nDraw a random value of x domain.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.get_cons_from_var-Tuple{LocalSearchSolvers._Model,Any}","page":"Public","title":"LocalSearchSolvers.get_cons_from_var","text":"get_cons_from_var(m::M, x) where M <: Union{Model, AbstractSolver}\n\nAccess the constraints restricting variable x.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.get_constraint-Tuple{LocalSearchSolvers._Model,Any}","page":"Public","title":"LocalSearchSolvers.get_constraint","text":"get_constraint(m::M, c) where M <: Union{Model, AbstractSolver}\n\nAccess the constraint c.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.get_constraints-Tuple{LocalSearchSolvers._Model}","page":"Public","title":"LocalSearchSolvers.get_constraints","text":"get_constraints(m::M) where M <: Union{Model, AbstractSolver}\n\nAccess the constraints of m.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.get_domain-Tuple{LocalSearchSolvers._Model,Any}","page":"Public","title":"LocalSearchSolvers.get_domain","text":"get_domain(m::M, x) where M <: Union{Model, AbstractSolver}\n\nAccess the domain of variable x.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.get_name-Tuple{LocalSearchSolvers._Model,Any}","page":"Public","title":"LocalSearchSolvers.get_name","text":"get_name(m::M, x) where M <: Union{Model, AbstractSolver}\n\nAccess the name of variable x.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.get_objective-Tuple{LocalSearchSolvers._Model,Any}","page":"Public","title":"LocalSearchSolvers.get_objective","text":"get_objective(m::M, o) where M <: Union{Model, AbstractSolver}\n\nAccess the objective o.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.get_objectives-Tuple{LocalSearchSolvers._Model}","page":"Public","title":"LocalSearchSolvers.get_objectives","text":"get_objectives(m::M) where M <: Union{Model, AbstractSolver}\n\nAccess the objectives of m.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.get_variable-Tuple{LocalSearchSolvers._Model,Any}","page":"Public","title":"LocalSearchSolvers.get_variable","text":"get_variable(m::M, x) where M <: Union{Model, AbstractSolver}\n\nAccess the variable x.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.get_variables-Tuple{LocalSearchSolvers._Model}","page":"Public","title":"LocalSearchSolvers.get_variables","text":"get_variables(m::M) where M <: Union{Model, AbstractSolver}\n\nAccess the variables of m.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.get_vars_from_cons-Tuple{LocalSearchSolvers._Model,Any}","page":"Public","title":"LocalSearchSolvers.get_vars_from_cons","text":"get_vars_from_cons(m::M, c) where M <: Union{Model, AbstractSolver}\n\nAccess the variables restricted by constraint c.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.golomb","page":"Public","title":"LocalSearchSolvers.golomb","text":"golomb(n, L=n²)\n\nModel the Golomb problem of n marks on the ruler 0:L. The modeler argument accepts :raw, and :JuMP (default), which refer respectively to the solver internal model, the MathOptInterface model, and the JuMP model.\n\n\n\n\n\n","category":"function"},{"location":"public/#LocalSearchSolvers.length_cons-Tuple{LocalSearchSolvers._Model,Any}","page":"Public","title":"LocalSearchSolvers.length_cons","text":"length_cons(m::M, c) where M <: Union{Model, AbstractSolver}\n\nReturn the length of constraint c.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.length_cons-Tuple{LocalSearchSolvers._Model}","page":"Public","title":"LocalSearchSolvers.length_cons","text":"length_cons(m::M) where M <: Union{Model, AbstractSolver}\n\nReturn the number of constraints in m.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.length_var-Tuple{LocalSearchSolvers._Model,Any}","page":"Public","title":"LocalSearchSolvers.length_var","text":"length_var(m::M, x) where M <: Union{Model, AbstractSolver}\n\nReturn the domain length of variable x.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.mincut-Tuple{Any}","page":"Public","title":"LocalSearchSolvers.mincut","text":"mincut(graph::AbstractMatrix{T}; source::Int, sink::Int, interdiction::Int = 0) where T <: Number\n\nCompute the minimum cut of a graph.\n\nArguments:\n\ngraph: Any matrix <: AbstractMatrix that describes the capacities of the graph\nsource: Id of the source node; must be set\nsink: Id of the sink node; must be set\ninterdiction: indicates the number of forbidden links\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.model-Tuple{}","page":"Public","title":"LocalSearchSolvers.model","text":"model()\n\nConstruct a _Model, empty by default. It is recommended to add the constraints, variables, and objectives from an empty _Model. The following keyword arguments are available,\n\nvars=Dictionary{Int,Variable}(): collection of variables\ncons=Dictionary{Int,Constraint}(): collection of cosntraints\nobjs=Dictionary{Int,Objective}(): collection of objectives\nkind=:generic: the kind of problem modeled (useful for specialized methods such as pretty printing)\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.o_dist_extrema-Tuple{Any}","page":"Public","title":"LocalSearchSolvers.o_dist_extrema","text":"dist_extrema(values::T...) where {T <: Number}\n\nComputes the distance between extrema in an ordered set.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.o_mincut-Tuple{Any,Any}","page":"Public","title":"LocalSearchSolvers.o_mincut","text":"o_mincut(graph, values; interdiction = 0)\n\nCompute the capacity of a cut (determined by the state of the solver) with a possible interdiction on the highest capacited links.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.objective!-Tuple{LocalSearchSolvers._Model,Any}","page":"Public","title":"LocalSearchSolvers.objective!","text":"objective!(m::M, func) where M <: Union{Model, AbstractSolver}\n\nAdd an objective evaluated by func.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.objective-Tuple{Any,Any}","page":"Public","title":"LocalSearchSolvers.objective","text":"objective(func, name)\n\nConstruct an objective with a function func that should be applied to a collection of variables.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.solution-Tuple{Any}","page":"Public","title":"LocalSearchSolvers.solution","text":"solution(s)\n\ntabu Return the only/best known solution of a satisfaction/optimization model.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.solve!-Tuple{Any}","page":"Public","title":"LocalSearchSolvers.solve!","text":"solve!(s; max_iteration=1000, verbose::Bool=false)\n\nRun the solver until a solution is found or max_iteration is reached. verbose=true will print out details of the run.\n\n# Simply run the solver with default max_iteration\nsolve!(s)\n\n# Run indefinitely the solver with verbose behavior.\nsolve!(s, max_iteration = Inf, verbose = true)\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.specialize!-Tuple{Any}","page":"Public","title":"LocalSearchSolvers.specialize!","text":"specialize!(s) = begin\n\nDOCSTRING\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.specialize-Tuple{LocalSearchSolvers._Model}","page":"Public","title":"LocalSearchSolvers.specialize","text":"specialize(m::M) where M <: Union{Model, AbstractSolver}\n\nSpecialize the structure of a model to avoid dynamic type attribution at runtime.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.sudoku-Tuple{Any}","page":"Public","title":"LocalSearchSolvers.sudoku","text":"sudoku(n; start= Dictionary{Int, Int}(), modeler = :JuMP)\n\nCreate a model for the sudoku problem of domain 1:n² with optional starting values. The modeler argument accepts :raw, :MOI, and :JuMP (default), which refer respectively to the solver internal model, the MathOptInterface model, and the JuMP model.\n\n\n\n\n\n","category":"method"},{"location":"public/#LocalSearchSolvers.variable!","page":"Public","title":"LocalSearchSolvers.variable!","text":"variable!(m::M, d) where M <: Union{Model, AbstractSolver}\n\nAdd a variable with domain d to m.\n\n\n\n\n\n","category":"function"},{"location":"public/#LocalSearchSolvers.variable-Tuple{}","page":"Public","title":"LocalSearchSolvers.variable","text":"variable(values::AbstractVector{T}, name::AbstractString; domain = :set) where T <: Number\nvariable(domain::AbstractDomain, name::AbstractString) where D <: AbstractDomain\n\nConstruct a variable with discrete domain. See the domain method for other options.\n\nd = domain([1,2,3,4], types = :indices)\nx1 = variable(d, \"x1\")\nx2 = variable([-89,56,28], \"x2\", domain = :indices)\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = LocalSearchSolvers","category":"page"},{"location":"#Constraint-Based-Local-Search","page":"Home","title":"Constraint-Based Local Search","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LocalSearchSolvers.jl proposes sets of technical components of Constraint-Based Local Search (CBLS) solvers and combine them in various ways.","category":"page"},{"location":"","page":"Home","title":"Home","text":"<!– TODO: what is a CBLS solver etc. –>","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Dependencies","page":"Home","title":"Dependencies","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package makes use of several dependencies from the JuliaConstraints GitHub org:","category":"page"},{"location":"","page":"Home","title":"Home","text":"ConstraintDomains.jl: a domains back-end package for all JuliaConstraints front packages\nConstraints.jl: a constraints back-end package for all JuliaConstraints front packages\nCompositionalNetworks.jl: a module to learn error functions automatically given a concept\nGaramon.jl (incoming): geometrical constraints","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Wanted features list:","category":"page"},{"location":"","page":"Home","title":"Home","text":"[ ] Resolution of problems\n[x] SATisfaction\n[x] OPTimisation (single-objective)\n[ ] OPTimisation (multiple-objective)\n[ ] Dynamic problems\n[ ] Domains\n[x] Discrete domains (any type of numbers)\n[ ] Continuous domains\n[ ] Arbitrary Objects such as physical ones\n[ ] Parallelization\n[x] Multithreading\n[ ] Distributed\n[ ] Asynchronicity (for dynamic problems)\n[ ] Solvers\n[x] Weak-tabu list (based on the method in GHOST, the C++ lib)\n[ ] Adaptive Search\n[ ] Extremal optimization\n[ ] Neighbourhoud selection\n[ ] Variable selection\n[ ] Neighbourhood discovery and weighting\n[ ] Domain Specific Languages (DSL)\n[x| ] Straight Julia | MathOptInterface.jl \n[x] JuMPish\n[ ] MiniZinc\n[ ] Learning settings\n[x] Compositional Networks (error functions, cost functions)\n[ ] Restart: partial, probability\n[ ] Mixed-solvers\n[ ] Reinforcement learning for above mentioned learning features\n[ ] Automatic benchmarking and learning from all the possible parameter combination (instance, model, solver, size, restart, hardware, etc.) ","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Contributions to this package are more than welcome and can be arbitrarily, and not exhaustively, split as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"All features mentioned above\nAdding new constraints and symmetries\nAdding new ICNs to learn error of existing constraints\nCreating other compositional networks which target other kind of constraints\nJust making stuff better, faster, user-friendlier, etc.","category":"page"},{"location":"#Contact","page":"Home","title":"Contact","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Do not hesitate to contact me (@azzaare) or other members of JuliaConstraints on GitHub (file an issue), the julialang discourse forum, the julialang slack channel, the julialang zulip server, or the Humans of Julia (HoJ) discord server.","category":"page"}]
}
